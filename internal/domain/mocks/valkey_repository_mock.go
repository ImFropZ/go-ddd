// Code generated by MockGen. DO NOT EDIT.
// Source: valkey_repository.go
//
// Generated by this command:
//
//	mockgen -source=valkey_repository.go -destination=../mocks/valkey_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockValkeyRepository is a mock of ValkeyRepository interface.
type MockValkeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockValkeyRepositoryMockRecorder
	isgomock struct{}
}

// MockValkeyRepositoryMockRecorder is the mock recorder for MockValkeyRepository.
type MockValkeyRepositoryMockRecorder struct {
	mock *MockValkeyRepository
}

// NewMockValkeyRepository creates a new mock instance.
func NewMockValkeyRepository(ctrl *gomock.Controller) *MockValkeyRepository {
	mock := &MockValkeyRepository{ctrl: ctrl}
	mock.recorder = &MockValkeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValkeyRepository) EXPECT() *MockValkeyRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockValkeyRepository) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockValkeyRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockValkeyRepository)(nil).Close))
}

// Delete mocks base method.
func (m *MockValkeyRepository) Delete(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockValkeyRepositoryMockRecorder) Delete(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockValkeyRepository)(nil).Delete), varargs...)
}

// Exists mocks base method.
func (m *MockValkeyRepository) Exists(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockValkeyRepositoryMockRecorder) Exists(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockValkeyRepository)(nil).Exists), ctx, key)
}

// Expire mocks base method.
func (m *MockValkeyRepository) Expire(ctx context.Context, key string, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockValkeyRepositoryMockRecorder) Expire(ctx, key, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockValkeyRepository)(nil).Expire), ctx, key, ttl)
}

// Get mocks base method.
func (m *MockValkeyRepository) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockValkeyRepositoryMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockValkeyRepository)(nil).Get), ctx, key)
}

// HGet mocks base method.
func (m *MockValkeyRepository) HGet(ctx context.Context, key, field string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGet", ctx, key, field)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGet indicates an expected call of HGet.
func (mr *MockValkeyRepositoryMockRecorder) HGet(ctx, key, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGet", reflect.TypeOf((*MockValkeyRepository)(nil).HGet), ctx, key, field)
}

// HGetAll mocks base method.
func (m *MockValkeyRepository) HGetAll(ctx context.Context, key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", ctx, key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockValkeyRepositoryMockRecorder) HGetAll(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockValkeyRepository)(nil).HGetAll), ctx, key)
}

// HSet mocks base method.
func (m *MockValkeyRepository) HSet(ctx context.Context, key string, values map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HSet", ctx, key, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// HSet indicates an expected call of HSet.
func (mr *MockValkeyRepositoryMockRecorder) HSet(ctx, key, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HSet", reflect.TypeOf((*MockValkeyRepository)(nil).HSet), ctx, key, values)
}

// Increment mocks base method.
func (m *MockValkeyRepository) Increment(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockValkeyRepositoryMockRecorder) Increment(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockValkeyRepository)(nil).Increment), ctx, key)
}

// LPush mocks base method.
func (m *MockValkeyRepository) LPush(ctx context.Context, key string, values ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LPush", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockValkeyRepositoryMockRecorder) LPush(ctx, key any, values ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key}, values...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockValkeyRepository)(nil).LPush), varargs...)
}

// LRange mocks base method.
func (m *MockValkeyRepository) LRange(ctx context.Context, key string, start, stop int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LRange", ctx, key, start, stop)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LRange indicates an expected call of LRange.
func (mr *MockValkeyRepositoryMockRecorder) LRange(ctx, key, start, stop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LRange", reflect.TypeOf((*MockValkeyRepository)(nil).LRange), ctx, key, start, stop)
}

// Set mocks base method.
func (m *MockValkeyRepository) Set(ctx context.Context, key string, value any, ttl int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockValkeyRepositoryMockRecorder) Set(ctx, key, value, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockValkeyRepository)(nil).Set), ctx, key, value, ttl)
}
