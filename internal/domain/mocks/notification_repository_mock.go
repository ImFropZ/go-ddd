// Code generated by MockGen. DO NOT EDIT.
// Source: notification_repository.go
//
// Generated by this command:
//
//	mockgen -source=notification_repository.go -destination=../mocks/notification_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
	isgomock struct{}
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// SendToEmail mocks base method.
func (m *MockNotificationRepository) SendToEmail(fromEmail string, toEmail []string, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendToEmail", fromEmail, toEmail, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToEmail indicates an expected call of SendToEmail.
func (mr *MockNotificationRepositoryMockRecorder) SendToEmail(fromEmail, toEmail, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToEmail", reflect.TypeOf((*MockNotificationRepository)(nil).SendToEmail), fromEmail, toEmail, message)
}
