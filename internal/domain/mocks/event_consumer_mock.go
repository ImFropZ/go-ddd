// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go
//
// Generated by this command:
//
//	mockgen -source=consumer.go -destination=../mocks/event_consumer_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	event "github/imfropz/go-ddd/internal/domain/event"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventConsumer is a mock of EventConsumer interface.
type MockEventConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockEventConsumerMockRecorder
	isgomock struct{}
}

// MockEventConsumerMockRecorder is the mock recorder for MockEventConsumer.
type MockEventConsumerMockRecorder struct {
	mock *MockEventConsumer
}

// NewMockEventConsumer creates a new mock instance.
func NewMockEventConsumer(ctrl *gomock.Controller) *MockEventConsumer {
	mock := &MockEventConsumer{ctrl: ctrl}
	mock.recorder = &MockEventConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventConsumer) EXPECT() *MockEventConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventConsumer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEventConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventConsumer)(nil).Close))
}

// Consume mocks base method.
func (m *MockEventConsumer) Consume(topics []string, handler event.EventHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", topics, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockEventConsumerMockRecorder) Consume(topics, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockEventConsumer)(nil).Consume), topics, handler)
}

// MockEventHandler is a mock of EventHandler interface.
type MockEventHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventHandlerMockRecorder
	isgomock struct{}
}

// MockEventHandlerMockRecorder is the mock recorder for MockEventHandler.
type MockEventHandlerMockRecorder struct {
	mock *MockEventHandler
}

// NewMockEventHandler creates a new mock instance.
func NewMockEventHandler(ctrl *gomock.Controller) *MockEventHandler {
	mock := &MockEventHandler{ctrl: ctrl}
	mock.recorder = &MockEventHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventHandler) EXPECT() *MockEventHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockEventHandler) Handle(topic string, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", topic, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockEventHandlerMockRecorder) Handle(topic, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockEventHandler)(nil).Handle), topic, key, value)
}
